@using QuestGiver.Shared.Models;
@inject HttpClient http
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

@page "/quests/{Id}"


@if(quest == null || currentUser == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-success save-button" @onclick="AssignThisQuestToMe">Assign This Quest To Me</button>

  //inputs to edit quest properties
  <h3>Quest Name</h3>
  <input type="text" @bind-value="quest.Name"/>

  <h3>Quest Description</h3>
  <input type="text" @bind-value="quest.Description" />

  <h3>Quest Complete?</h3>
  <input type="checkbox" @bind-value="quest.IsCompleted" checked="@quest.IsCompleted"/>

    <h3>Quest Priority</h3>

    <select @bind="priority">
        <option value="1">High</option>
        <option value="2">Medium</option>
        <option value="3">Low</option>
    </select>
  
    <h3>Quest Refresh Time (Days)</h3>
    <input type="number" @bind-value="quest.RefreshTimeInDays" />

    <h3>Exp Rewarded for Completing This Quest</h3>
    <input type="number" @bind-value="quest.ExperienceForCompletion" />
 
    @if (saving)
    {
        <button class="btn btn-success" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Saving...
        </button>
    }
    else
    {
        //button to update quest
        <button class="btn btn-success save-button" @onclick="UpdateQuest">Save</button>
    }
}


@code {
    private Quest? quest;
    private bool saving = false;
    private int priority = 1;
    private Assignee? currentUser;
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //get quest from server
        quest = await http.GetFromJsonAsync<Quest>($"api/quests/{Id}");
        currentUser = sessionStorage.GetItem<Assignee>("CurrentUser");
        priority = (int)quest.Priority;
    }

    private async Task UpdateQuest()
    {
        quest.Priority = (QuestPriority)priority;
        saving = true;
        await http.PutAsJsonAsync($"api/quests/{Id}", quest);
        saving = false;
        navigationManager.NavigateTo("/quests");
    }

    void SelectedPriorityChanged(ChangeEventArgs e)
    {
        //set quest priority
        priority = int.Parse(e.Value.ToString());
        switch (e.Value.ToString())
        {
          case "1":
              quest.Priority = QuestPriority.High;
              Console.WriteLine("High");
              break;

          case "2":
            quest.Priority = QuestPriority.Medium;
            Console.WriteLine("Medium");
            break;

          case "3":
            quest.Priority = QuestPriority.Low;
            Console.WriteLine("Low");
            break;

          default:
            quest.Priority = QuestPriority.Medium;
            Console.WriteLine("default");
            break;
        }
    }

    private async Task AssignThisQuestToMe()
    {
        await http.PostAsJsonAsync($"api/quests/AssignThisQuestToMe/{currentUser.Name}", quest);
        navigationManager.NavigateTo("/");
    }
}
