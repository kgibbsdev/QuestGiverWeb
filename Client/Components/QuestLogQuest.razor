@using QuestGiver.Shared.Models
<div class="container">
	<div class="half-screen-box">
	  <div class="text-container">
			<h3 class="quest-name">@quest.Name</h3>
			<p class="quest-description">@quest.Description</p>
			<div class="quest-details-container"></div
			  <span class="quest-exp-on-completion">@quest.ExperienceForCompletion</span>
			<div class="quest-priority-container">
				<span class="quest-priority">@quest.Priority</span>
			</div>
			
		  </div>
		<div class="buttons-container">
			<button @onclick="InternalOnCompleteButtonPressed" class="action-button">Complete Quest</button>
			<button @onclick="InternalOnAbandonButtonPressed" class="action-button">Abandon Quest</button>
		</div>
	</div>
	<!-- Add more boxes as needed -->
</div>
@code {
	//poopy heehee :) - CJ
	[Parameter]
	public Quest quest { get; set; } = 
	new Quest("placeholder");

	[Parameter]
	public EventCallback<Quest> OnAbandonButtonPressed { get; set; }

	[Parameter]
	public EventCallback<Quest> OnCompleteButtonPressed { get; set; }

	public async Task InternalOnAbandonButtonPressed()
	{
		if(OnAbandonButtonPressed.HasDelegate)
		{
			await OnAbandonButtonPressed.InvokeAsync(quest);
		}
		else
		{
			Console.WriteLine("No delegate for OnAbandonButtonPressed!");
		}
	}

	public async Task InternalOnCompleteButtonPressed()
	{
		Console.WriteLine("QuestLogQuest OnComplete");
		if(OnCompleteButtonPressed.HasDelegate)
		{
			await OnCompleteButtonPressed.InvokeAsync(quest);
		}
		else
		{
			Console.WriteLine("No delegate for OnCompleteButtonPressed!");
		}
	}

}

