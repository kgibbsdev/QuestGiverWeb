@using System.Net.Http
@using System.Net.Http.Json
@using QuestGiver.Shared.Models;
@using QuestGiver.Shared.Models.Requests;
@using System.Text;
@using System.Text.Json;

@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject NavigationManager navigationManager
@inject HttpClient http

@page "/"

@if (currentUser != null)
{
    <div class="container">
        <h1>Hello, @currentUser.Name!</h1>
        @*<img class="wizard" src="https://img.freepik.com/premium-vector/cartoon-old-wizard-cartoon-old-wizard-holding-wand_70172-2554.jpg?w=2000" />*@
    </div>

    <ProgressBar CurrentValue="currentUser.TotalExperience" MaxValue="maxProgressValue" />

    @if(currentUser.CurrentQuest != null)
    {
        <div>
            <p>Your current quest is @currentUser.CurrentQuest.Name</p>
        </div>
        
        <div>
            <button type="button" onclick="@CompleteCurrentQuest" class="give-me-a-quest-button btn btn-primary">Turn in Current Quest</button>
             <button type="button" onclick="@AbandonCurrentQuest" class="give-me-a-quest-button btn btn-primary">Abandon Quest</button>
        </div>
    }
    else
    {
        <div>You do not have a current quest</div>
        <button type="button" onclick="@AssignQuestToPlayer" class="give-me-a-quest-button btn btn-primary">Give Me A Quest!</button>
    }

    <div>
        <p>Name: @currentUser.Name</p>
        <p>Current XP: @currentUser.TotalExperience</p>
        <p>Current Level: @currentUser.Level</p>
    </div>
}
else 
{
    <div>
        <p class="who-goes-there-text">WHO GOES THERE</p>
        <button type="button" onclick="@ChooseCJ" class="give-me-a-quest-button btn btn-primary">CJ</button
        <button type="button" onclick="@ChooseKyle" class="give-me-a-quest-button btn btn-primary">Kyle</button
    </div>
}

@code {
    private IEnumerable<Assignee> assignees;
    private IEnumerable<Quest> quests;
    private Assignee currentUser;

    private int progressValue = 0;
    private int maxProgressValue = 10000;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //currentUser = sessionStorage.GetItem<Assignee>("CurrentUser");
            assignees = await http.GetFromJsonAsync<Assignee[]>("api/assignees");
            quests = await http.GetFromJsonAsync<Quest[]>("api/quests");
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async void ChooseCJ()
    {
        SetCurrentUser("CJ");
    }

    private async void ChooseKyle()
    {
        SetCurrentUser("Kyle");
    }

    private async void SetCurrentUser(string name)
    {
        if (assignees != null)
        {
            //WARNING: This will throw an exception if an assignee is not found
            currentUser = assignees.Single(a => a.Name == name);
            progressValue = currentUser.TotalExperience; 
            //sessionStorage.SetItem("CurrentUser", currentUser);
        }
        else
        {
            Console.WriteLine("Assignees is null and caused 'SetCurrentUser' to fail!");
        }
    }

    private async void AssignQuestToPlayer()
    {
        var response = await http.PostAsJsonAsync($"api/quests/assign", currentUser);

        //get the body from this response
        var body = await response.Content.ReadAsStringAsync();

        //get the assignee from the body
        try
        {
            currentUser = JsonSerializer.Deserialize<Assignee>(body);
            //sessionStorage.SetItem("CurrentUser", currentUser);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        Console.WriteLine("body: " + body);
        StateHasChanged();
    }

    private async void CompleteCurrentQuest()
    {
        //We know current quest is not null because the button is not visible if it is null
        var quest = quests.Single(q => q.Id == currentUser.CurrentQuest!.Id);
        quest.CompletedDate = DateTime.Now;
        quest.IsCompleted = true;

        var request = new CompleteQuestRequest(quest, currentUser);
        await http.PostAsJsonAsync($"api/quests/complete", request);

        currentUser.CurrentQuest = null;
        quests = await http.GetFromJsonAsync<Quest[]>("api/quests");
        currentUser = await http.GetFromJsonAsync<Assignee>($"api/assignees/{currentUser.Id}");

        StateHasChanged();
    }

    private async void AbandonCurrentQuest()
    {
        currentUser.CurrentQuest = null;
        currentUser.CurrentQuestId = null;

         var response = await http.PutAsJsonAsync<Assignee>($"api/assignees/{currentUser.Id}", currentUser);

        if(response.IsSuccessStatusCode)
        {
           currentUser = await http.GetFromJsonAsync<Assignee>($"api/assignees/{currentUser.Id}");
           //sessionStorage.SetItem("CurrentUser", currentUser);
           StateHasChanged();
        }
    }
}
